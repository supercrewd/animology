{% if section.settings.byob_section_wrapper %}{%- assign wrapper-class = 'byob-section-wrapper' -%}{% endif %}
{% render "byob-messages" %}
<!-- Using font awesome v4.7 & v5.x. The icons are licensed under the Creative Commons Attribution 4.0 International license: https://fontawesome.com/license -->
<script src="https://use.fontawesome.com/acee97b243.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
{% if request.design_mode or handle == 'show-me-the-magic-bundle' %}
<script src="https://cdn.lr-ingest.io/LogRocket.min.js" crossorigin="anonymous"></script>
<script>
window.LogRocket && window.LogRocket.init('ibvkan/byob', {
    network: {
      isEnabled: false,
    },
});
</script>
{% endif %}
<script>
var json_products;
var buildrules = [];
var buildrule;
{%- assign buildrules = product.metafields.byob.buildrules %}
{%- comment -%}if buildrule metafield type = 'json', get value from new metafield {%- endcomment -%}
{%- if buildrules.type == 'json' -%}{%- assign buildrules = buildrules.value -%}{%- endif %}
{%- for buildrule in buildrules -%}
  	buildrule = {{ buildrule | json }};
	{% assign collection = collections[buildrule.handle] %}
    {% paginate collection.products by 50 %}
    json_products = [
    {%- for product in collection.products -%}
      {
        id: {{ product.id }},
        title: {{ product.title | strip_newlines | json }},
        price: "{{ product.price | money }}",
        featured_image: "{{ product.featured_image.src | img_url: '480x' }}",
        variants: {{ product.variants | json }},
        options: {{ product.options_with_values | json }},
        available: {{ product.available }},
        handle: "{{ product.handle }}",
        product_class:  "line_item",
        vendor: "{{ product.vendor }}",
      },
    {%- endfor -%}
    ];
  	buildrule.paginate = {{ paginate | json }};
  	{% endpaginate %}
  	buildrule.json_products = json_products;
  	buildrule.isActiveTab = false;
  	buildrule.isCompleted = false;
  	buildrules.push(buildrule);
{%- endfor %}
var currencySymbol = "{{ cart.currency.symbol }}";
var currencyCode = "{{ cart.currency.iso_code }}";
var itemsPerRow = {{ section.settings.items_per_row }};
var bundleID = {{ product.metafields.byob.bundleID }};
var isPublished = {% if product.published_at %}true;{% else %}false;{% endif %}
{%- assign discount = product.metafields.byob.discount %}
var discount = {% if discount.type == 'json' %}{{ discount }}{% else %}{{ discount | json}}{% endif %};
var locale = window.navigator.userLanguage || window.navigator.language;
var icon_type = "{{ section.settings.icon_type }}";
var beacon_color = "{{ section.settings.beacon_color }}";
</script>
<style>
.card-title {
  {% unless section.settings.footer_show_product_title %}display: none;{% endunless %}
}
#label-total-price {
  {% unless section.settings.footer_show_total_price %}display: none;{% endunless %}
}
#tick-icon {
  fill: {{ section.settings.tick_icon_color }};
}
.byob-page-margin {
  margin-bottom: 5em;
}
select:focus { /* remove select focus style in card */
  outline: none;
  box-shadow: none;
}
.accordion {
  background-color: {{ section.settings.tab_color }};
  color: #444;
  cursor: pointer;
  padding: 18px;
  width: 100%;
  text-align: left;
  border: none;
  outline: none;
  transition: 0.4s;
  margin: 1em 0 0;
  transition: transform .2s;
}
.accordion:hover {
  filter: brightness(90%);
  transform: scale(1.05);
}
.btn-add-to-bundle, .btn-add-to-cart {
    background-color: {{ section.settings.button_color }};
  	color: {{ section.settings.button_text_color }};
    margin-bottom: 20px;
  }
.btn-add-to-bundle:not([disabled]):hover, .btn-add-to-bundle:focus, .btn-add-to-cart:not([disabled]):hover, .btn-add-to-cart:focus {
  background-color: {{ section.settings.button_color }};
  color: {{ section.settings.button_text_color }};
  filter: brightness(90%);
}
.grid-collection {
  display: grid;
  grid-template-columns: repeat({{ section.settings.items_per_row }}, 1fr);
  gap: 1px;
  margin: 1em;
  background-color: {{ section.settings.card_background }};
}
.footer-image{
  /* height: 150px; */
}
.flex-item-right {
  align-items: baseline;
  padding-left:50px;
  padding-right:25px;
  flex: 0.7;
}
.byob-footer {
  font-size: 0.9em;
  position: fixed;
  /* left: 0; */
  bottom: {{ section.settings.footer_bottom_position }}px;
  margin: 0 auto;
  left: calc(-50vw + 50%);
  right: calc(-50vw + 50%);
  width: 80%;
  background-color: {{ section.settings.background_color }};
  color: {{ section.settings.footer_product_name_color }};
  text-align: center;
  /* separate product cards & button */
  display:flex;
  flex-wrap: wrap;
  justify-content:center;
  align-items: center; /* baseline; */
  z-index:1000;
  box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px; /* CSS scan #19 */
  border-radius: 3px;
}
.left-arrow {
  padding: 0 25px;
  cursor: pointer;
}
.right-arrow {
  padding-left:25px;
  cursor: pointer;
}
.byob-wrapper {
  display: grid;
  grid-gap: 16px;
  grid-template-columns: repeat(auto-fill,minmax(200px,1fr));
  grid-auto-flow: column; /* make it overflow to the row instead of adding to the next row*/
  grid-auto-columns: minmax(200px,1fr); /* a default column size */
  overflow-x: auto;
  width: 65%;
  scroll-behavior: smooth;
}
.byob-wrapper .card {
	text-align: center;
  	position: relative;
}
#hide-footer-button {
  position: absolute;
  top: 5px;
  cursor: pointer;
  right: 5px;
  width: 20px;
  color: black;
}
#byob-beacon {
  height: 60px;
  min-width: 60px;
  border-radius: 200px;
  background-color: {{ section.settings.beacon_color }};
  position: fixed;
  {% if section.settings.icon_horizontal_position == 'left' %}left{% else %}right{% endif %}: 20px;
  bottom: 20px;
  z-index:999;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  box-shadow: rgba(0, 0, 0, 0.1) 0px 10px 15px -3px, rgba(0, 0, 0, 0.05) 0px 4px 6px -2px;
}
@media screen and (max-width: 992px) {
  .grid-collection {
    grid-template-columns: repeat(3, 1fr);
  }
  .footer-image{
    max-height: 100px;
  }
  .flex-item-right {
    flex: 85%;
  }
  .card-title {
    display: none;
  }
  .byob-footer {
    width: 98%;
    column-gap: 10px;
  }
  .left-arrow {
    padding: 0px;
  }
  .right-arrow {
    padding: 0px;
  }
  .byob-wrapper {
    width: 80%;
    grid-template-columns: repeat(auto-fill,minmax(100px,1fr));
    grid-auto-columns: minmax(100px,1fr);
  }
  .modal-container {
    width: 90%;
  }
}
@media screen and (max-width: 600px) {
  .grid-collection {
    grid-template-columns: repeat(2, 1fr);
  }
  .footer-image{
    max-height: 53px;
  }
  .byob-wrapper {
    width: 80%;
    grid-template-columns: repeat(auto-fill,minmax(55px,1fr));
    grid-auto-columns: minmax(55px,1fr);
  }
}
.card {
    padding: {{ section.settings.product_card_padding }}px;
	padding-top:20px;
 	padding-bottom:20px;
    opacity: 1;
}
.close {
    position: absolute;
    top: 2px;
    right: 0px;
  	color: black;
  	cursor: pointer;
}
/* Hide scrollbar for Chrome, Safari and Opera */
.byob-wrapper::-webkit-scrollbar {
    display: none;
}
/* Hide scrollbar for IE, Edge and Firefox */
.byob-wrapper {
  -ms-overflow-style: none;  /* IE and Edge */
  scrollbar-width: none;  /* Firefox */
}
.toggle-footer-icon {
   fill: {{ section.settings.button_color }};
}
.grid-product {
  display: flex;
  flex-direction: column;
  justify-content: center;
  text-align: center;
  grid-row-gap: 5px;
  padding: 10px;
  line-height: 1;
  border-radius: 5px;
  grid-template-rows: auto auto auto auto min-content; /* set button height */
}
.grid-product-text {
  text-decoration: none;
  color: rgba(var(--color-foreground),.75);
}
.bg-red {
  background-color: red;
}
.inline-block {
  display:inline-block;
}
.accordion:after {
  content: '\FF0B'; /* Unicode character for "plus" sign (+) */
  font-size: 1.5em;
  line-height: 1em;
  color: #777;
  float: right;
  margin-left: 5px;
}
.activeTab:after {
  content: "\FF0D"; /* Unicode character for "minus" sign (-) */
}
.panel {
  transition: max-height 0.2s ease-out;
}
#app {
  padding: 1rem;
}
.m-auto {
    margin: auto;
}
</style>

<div id="byobApp" class="page-width wrapper byob-page-margin {{ wrapper-class }}">
  <template v-for="(buildrule, index) in buildrules">
    <button class="accordion"  :class="{ activeTab: buildrule.isActiveTab }" @click.prevent="toggleActiveTab(index)">
      <div style="display: inline-flex; align-items: center">
        [[ index + 1 ]]. [[ $t('message.tabHeading', {quantity: buildrule.quantity, title: buildrule.title}) ]]
        <svg id="tick-icon" v-if="buildrule.isCompleted" xmlns="http://www.w3.org/2000/i" class="" viewBox="0 0 20 20" fill="green" style="width: 1.8em; margin-left:5px">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
        </svg>
      </div>
    </button>

    <div class="grid-collection panel" ref="panel" v-if="buildrule.isActiveTab">
      <product-card
        v-for="product in buildrule.json_products"
        v-bind:key="product.id"
        v-bind:product="product"
        :buildrules-index="index"
        :buildrule="buildrule"
        @clicked="storeVariantToBundle"
        ref="productCard"
      ></product-card>
    </div>

    <button type="button" @click.prevent="loadMoreProducts(index)" v-if="buildrule.isActiveTab && buildrule.paginate.pages > buildrule.paginate.current_page" class="btn btn-add-to-bundle m-auto button" style="display: block;"><span id="">[[ $t('message.loadMore') ]]</span></button></div>
  </template>

  <footer-bar :variants="selectedVariants" :buildrules="buildrules" @deleted="removeVariant" @clearall="clearSelectedVariants" @open="showModal = true"></footer-bar>

	<modal v-if="showModal" @close="showModal = false">
      <!-- use custom content here to overwrite default content -->
      <template v-slot:body>
        <p>[[ $t('message.bundleAddedToCart') ]]</p>
      </template>

      <template v-slot:footer>
        <button class="modal-default-button" type="button" onclick="window.location.href = 'https://' + window.location.hostname + '/cart'">
          [[ $t('message.viewCart') ]]
        </button>
	  </template>
    </modal>
</div>

<!-- This will only render in the theme editor -->
{% if request.design_mode %}
<script src="https://unpkg.com/vue@next"></script>
<script src="https://unpkg.com/mitt/dist/mitt.umd.js"></script>
<script>
function remountVueApp() {
    console.log('listen to shopify theme editor re-render. Render app to respond to DOM update');
    vueApp = createMyApp();
    vueApp.component('product-card', productCard)
    vueApp.component('footer-bar', footerBar);
    vm = vueApp.mount('#byobApp')
}
const emitter = window.mitt();
emitter.on('shopify:section:select', remountVueApp);
const themeEventHandler = (event) => {  // emit a generic version
    if (event.detail.load) emitter.emit(`${event.type}`, event);
};
// these are custom events emitted by the Shopify section editor
// we are hooking them up to our Vue event dispatcher
document.addEventListener('shopify:section:select', themeEventHandler);
</script>
{% else %}
<script src="https://unpkg.com/vue@3.2.6/dist/vue.global.prod.js"></script>
{% endif %}
<script src="https://unpkg.com/vue-i18n@9.1.6/dist/vue-i18n.global.prod.js"></script>

<script>
  function doubleRaf (callback) {
    requestAnimationFrame(() => {
      requestAnimationFrame(callback)
    })
  }

  const Bundle = {
    compilerOptions: {
      delimiters: ['[[', ']]'],
    },
    data() {
      return {
        itemsPerRow: itemsPerRow,
        selectedVariants: [],
        buildrules: buildrules,
        showModal: false
      }
    },
    mounted() {
      let vm = this;
      // set the 1st buildrule collection as the default active tab
      setTimeout(function(){ vm.toggleActiveTab(0) }, 500);
      this.$nextTick(function () {
      })
    },
    computed: {
    },
    methods: {
      removeVariant(index) {
        // variant remove from bundle, quantity increase by 1
        this.increaseVariantQuantity(this.selectedVariants[index])
        this.selectedVariants.splice(index, 1);
        this.updateBuildrulesCompleted();
      },
      clearSelectedVariants() {
        this.selectedVariants.length = 0;
        this.buildrules.forEach(buildrule => buildrule.isCompleted = false); // all builrules are set to incompleted
      },
      getJsonVariant(selectedVariant) {  // get variant in json (data source)
        let buildrule = this.buildrules[selectedVariant.buildrulesIndex]
        let product = buildrule.json_products.find(product => product.id == selectedVariant.productID);
        return product.variants.find(variant => variant.id == selectedVariant.id)
      },
      increaseVariantQuantity(selectedVariant) {  // increase variant quantity in json (data source)
        this.getJsonVariant(selectedVariant).inventory_quantity++;
      },
      decreaseVariantQuantity(selectedVariant) {  // decrease variant quantity in json (data source)
        this.getJsonVariant(selectedVariant).inventory_quantity--;
      },
      canOnlySelectedOnce(pickedVariant) {
        let buildrule = this.buildrules[pickedVariant.buildrulesIndex]
        return buildrule.item_selected_once && this.selectedVariants.includes(pickedVariant)
      },
      storeVariantToBundle(pickedVariant) {
        if (this.canOnlySelectedOnce(pickedVariant)) {
          alert(this.$i18n.t('message.selectOnce'));
          return
        }
        this.selectedVariants.push(pickedVariant);
        this.decreaseVariantQuantity(pickedVariant);
        this.updateBuildrulesCompleted();
      },
      formatProductsData(products) { // fixed Shopify API not consistent for ajax call
        for (product of products) {
          product.featured_image = product.images[0].src + '&width=480';
          for (variant of product.variants) {
            variant.name = product.title + ' - ' + variant.title;
            variant.price *= 100;
            let options = [];
            if (variant.option1) options.push(variant.option1);
            if (variant.option2) options.push(variant.option2);
            if (variant.option3) options.push(variant.option3);
            variant.options = options;
          }
        }
        return products
      },
      loadMoreProducts(i) {
        let paginate = this.buildrules[i].paginate;
        if (paginate.current_page < paginate.pages) {
            // fetch('../collections/' + this.buildrules[i].handle + '/products.json?limit=50&page=' + (paginate.current_page + 1))
          fetch('https://' + window.location.hostname + '/collections/' + this.buildrules[i].handle + '/products.json?limit=50&page=' + (paginate.current_page + 1))
            .then(response => response.json())
            .then(data => {
//               console.log('Successfully load more products:', data.products);
              this.buildrules[i].json_products =  this.buildrules[i].json_products.concat(this.formatProductsData(data.products));
              this.buildrules[i].paginate.current_page++;
            })
            .catch((error) => {
              console.error('Error:', error);
            });
        }
      },
      toggleActiveTab(index) {
        this.buildrules[index].isActiveTab = !this.buildrules[index].isActiveTab;
      },
      isCompleted(buildrule) {
        if (!buildrule.operator || buildrule.operator == '==')
          return buildrule.quantity == 0
        else if (buildrule.operator == '>=') // at least
          return buildrule.quantity <= 0
      },
      updateBuildrulesCompleted() {  // compare buildrules and selected variants to check completed
        let buildrulesCopy = JSON.parse(JSON.stringify(this.buildrules)); // copy buildrules by value
        this.selectedVariants.forEach(variant => buildrulesCopy[variant.buildrulesIndex].quantity--);
        this.buildrules.forEach((buildrule, i) => buildrule.isCompleted = this.isCompleted(buildrulesCopy[i]))
      },
    }
  }
  const createMyApp = () => Vue.createApp(Bundle)
  let vueApp = createMyApp();
  const productCard = {
      props: ['product', 'buildrulesIndex', 'buildrule'],
      emits: ['clicked'],
      compilerOptions: {
        delimiters: ['[[', ']]'],
      },
      data() {
        return {
          selectedOptionValues: ['','',''], // each variant must have 3 options
          selectedVariantPrice: '',
          available: this.product.available,
          selectedVariantID: '',
          pickedVariant: '',
          pickedVariantIndex: 0,
          featureImage: this.product.featured_image,
          NotAvailableMsg: this.$i18n.t('message.soldOut'),
        }
      },
      computed: {
        buttonText() {
          return (this.available ? this.$i18n.t('message.addToBundle') : this.NotAvailableMsg);
        },
        disableAdd() {
          if (!this.buildrule.operator || this.buildrule.operator == '==')
            return this.buildrule.isCompleted
          else if (this.buildrule.operator == '>=') // at least, no limit
            return false
        }
      },
      mounted() {
        // preset first selected option to the first variant
		let firstVariant = this.product.variants[0]
        if (firstVariant.option1 != null)
          this.selectedOptionValues[0] = firstVariant.option1
        if (firstVariant.option2 != null)
          this.selectedOptionValues[1] = firstVariant.option2
		if (firstVariant.option3 != null)
          this.selectedOptionValues[2] = firstVariant.option3
        this.selectedVariantPrice = currencySymbol + firstVariant.price / 100.0;
        this.selectedVariantID = firstVariant.id;
        this.pickedVariant = firstVariant;
        this.available = firstVariant.available;
      },
      methods: {
        // use variant feature or else product feature image
        setFeatureImage(variant) {
          if (variant.featured_image && variant.featured_image.hasOwnProperty('src') && variant.featured_image.src)
            this.featureImage = variant.featured_image.src;
          else if (!variant.featured_image && this.product.featured_image) // variant has no image, use product default feature image
            this.featureImage = this.product.featured_image;
        },
        selectVariant(index) {
          let variants = this.product.variants;

          console.log('selectedOptionValues = ' + this.selectedOptionValues);
          for (let i = 0; i < variants.length; i++) {
            let variant = variants[i];
            let options = variant.options;
            if (this.arraysEqual(options, this.selectedOptionValues.filter(this.removeEmptyString))) {
              this.available = variant.available;
              this.NotAvailableMsg = this.$i18n.t('message.soldOut');
              this.selectedVariantPrice = currencySymbol + variant.price / 100.0;
              this.setFeatureImage(variant);
              this.selectedVariantID = variant.id;
              this.pickedVariant = variant;
              this.pickedVariantIndex = i;
              return;
            }
          }
          // cannot find a variant with user selected option.
          this.available = false;
          this.NotAvailableMsg = this.$i18n.t('message.unavailable');
        },
        addVariantToBundle() {
          if (this.selectedVariantID !== '') {
            if (!this.pickedVariant.available) {
              	alert(this.$i18n.t('message.alertSoldOut'));
              	return;
            }
            this.pickedVariant.featureImage = this.featureImage;
            this.pickedVariant.selectedVariantPrice = this.selectedVariantPrice;
            this.pickedVariant.productID = this.product.id;
            // record which buildrule this variant belongs to
            this.pickedVariant.buildrulesIndex = this.buildrulesIndex;
			this.$emit('clicked', this.pickedVariant);
          }
        },
        arraysEqual(a, b) { // helper func
          if (a == null || b == null) return false;
          if (a.length !== b.length) return false;

          for (let i = 0; i < a.length; i++) {
            if (a[i] != b[i]) return false;
          }
          return true;
        },
        removeEmptyString(value) {
          return value != '';
        }
      },
      template: `
		<div class="grid-product" v-if="product.vendor != 'BYOB'">
            <img :src="[[ featureImage ]]" :alt="[[ product.title]]" class="m-auto" style="display:block">

            <a :href="'/products/'+ [[ product.handle ]]" target="_blank" class="grid-product-text">[[ product.title ]]</a>

            <template class="" v-if="product.variants.length >= 1 && product.options[0] != 'Title' && product.variants[0].option1 != 'Default Title'">
              <div v-for="(option, index) in product.options">
            	<label class="inline-block" style="padding-right:2px" v-if="option.name != 'default'">
            		[[ option.name ]]:
                </label>

                <select class="" v-model="selectedOptionValues[index]" @change="selectVariant(index)">
                  <option disabled value="">[[ $t('message.pick') ]][[ option.name ]]</option>
                  <option v-for="value in option.values"  v-bind:value="value">
                    [[ value ]]
                  </option>
                </select>
              </div>
            </template>

            <p><b>[[ selectedVariantPrice ]]</b></p>

            <button type="button" name="add" id="btnAddToBundle" class="btn btn-add-to-bundle button" @click="addVariantToBundle" :disabled="!available || disableAdd">
                <span id="AddToCartText">
                  [[ buttonText ]]
                </span>
            </button>
        </div>
      `
  };
  vueApp.component('product-card', productCard);
  {% comment -%}
  // use teleport to move shopify section to the end of body.
  // Otherwise, position: fixed doesn't work due to transform in page container
  {%- endcomment -%}
  const footerBar = {
    emits: ['deleted', 'clearall', 'open'],
	compilerOptions: {
      delimiters: ['[[', ']]'],
    },
    props: ['variants', 'buildrules'],
    data() {
      return {
        bundlePutToCart: false,
        showVariantName: true,
        isLoading: false,
        isPublished: isPublished,
        hide: false,
        icon_type: icon_type,
        beacon_color: beacon_color,
      }
    },
    computed: {
      contrastYIQ() {
          let r = parseInt(this.beacon_color.substr(1,2),16);
          let g = parseInt(this.beacon_color.substr(3,2),16);
          let b = parseInt(this.beacon_color.substr(5,2),16);
          let yiq = ((r*299)+(g*587)+(b*114))/1000;
          return (yiq >= 128) ? 'black' : 'white';
      },
      totalVariants() {
        return this.variants.length;
      },
      itemsLeft() {
        return this.totalItemsRequired - this.totalVariants;
      },
      buttonText() {
        if (this.isLoading)
          return this.$i18n.t('message.loading');
        else if (this.itemsLeft == 0)
          return this.bundlePrice ? this.$i18n.t('message.addBundleToCart') + ' (' + this.priceWithCurrency(this.bundlePrice) + ')' : this.$i18n.t('message.addBundleToCart');
        else if (this.itemsLeft == 1)
          return this.buildrules.length >= 2? this.$i18n.t('message.addMoreFrom', {title: this.getRemainingBuildrule().title}) : this.$i18n.tc('message.addMore', 1);
        else if (this.itemsLeft < 0) // at least, can add more than required
          return this.$i18n.t('message.addBundleToCart') + ' (' + this.priceWithCurrency(this.bundlePrice) + ')'
        else
          return this.$i18n.tc('message.addMore', 2, {quantity: this.itemsLeft});
      },
      totalItemsRequired() {
        return this.buildrules.reduce((a, buildrule) => a + buildrule.quantity, 0);
      },
      totalPrice() {
        return this.variants.reduce((a, variant) => a + variant.price / 100.0, 0);
      },
      buildrulesCompleted() {
        return this.buildrules.every(buildrule => buildrule.isCompleted)
      },
      bundlePrice() {
        if (!this.buildrulesCompleted) return false
        if (discount)
          if (discount.type == 'PR')
              return discount.value
          else if (discount.type == 'PC')
              return this.totalPrice - this.percentDiscount(this.totalPrice, discount.value)
          else if (discount.type == 'FA')
              return this.totalPrice - discount.value
      },
    },
    methods: {
      getRemainingBuildrule() {
          return this.buildrules.find(buildrule => !buildrule.isCompleted);
      },
      percentDiscount(price, discount_value) { // price: 999 (represent: $9.99)
        return Math.floor(price * discount_value) / 100 // round down to 2dp, simulate shopify calc
      },
      priceWithCurrency(price) {
        // use storefront api to format money
        return new Intl.NumberFormat(locale, {
          style: 'currency',
          currency: currencyCode
        }).format(price);
      },
      // change select variants data to the POST request data format
      getRequestDataFromVariants(variants) {
        purchasedItems = [];
        this.buildrules.forEach(buildrule => purchasedItems.push({"buildRuleID": buildrule.id}));
        for (variant of variants) {
          let buildRuleID = this.buildrules[variant.buildrulesIndex].id
          let item = purchasedItems.find(item => item.buildRuleID == buildRuleID)
          if (item)
            if (item.variants) {
              v = item.variants.find(obj => obj.variantID == variant.id)
              v ? v.quantity++ : item.variants.push({"variantID": variant.id, "quantity": 1});
            }
            else
              item.variants = [{"variantID": variant.id, "quantity": 1 }];
        }
        return {'purchasedItems': purchasedItems};
      },
      createVariantItemProperties(variants) {
      	let properties = {};
        for (const [i, variant] of variants.entries())
            properties[(i+1).toString()] = variant.sku === "" ? variant.name : variant.name + ' [' + variant.sku + ']'
        return properties;
      },
      addNewVariantToCart(variants, variant_id) {
        let properties = this.createVariantItemProperties(variants);
        let formData = {
           'items': [{
                'id': parseInt(variant_id),
                'quantity': 1,
                 properties: properties
            }]
        };

       // setInterval polling hack to add new variant to cart. add with setTimeout is not working
       let vm = this;
        var myVar = setInterval(
          function() {
            fetch('/cart/add.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
              console.log('Adding variant to cart:', data);
              if (data.status != 422) {
                clearInterval(myVar);
                vm.$emit('open');
                console.log('Success - added variant to cart');
              }
            })
            .catch((error) => {
              console.error('Error:', error);
              clearInterval(myVar);
            });
          }, 800);
      },
      // setTimeout hack to show loading icon & button text. Otherwise `this.isLoading = true;` cannot update DOM immediately
      setLoading(bool) {
        setTimeout(_ => {
          for (var i = 0; i < 100000000; i++) {}
          this.isLoading = bool;
        }, 25)
      },
      addBundleToCart() {
        if (!this.isPublished) {
            alert('You cannot add draft bundle to cart! Please turn it to active');
            return;
        }
        this.setLoading(true);
        let data = this.getRequestDataFromVariants(this.variants);
        data.bundleID = bundleID;
        // validate variants must be included for all buildRules
        if (!data.purchasedItems.every(item => item.hasOwnProperty('variants')))
          alert('Variants are missed for a bundle condition. Your page data may be deprecated. Please refresh the page and try again')

        let request = new Request('/apps/byob/create_new_variant/', {
          method: 'POST',
          body: JSON.stringify(data),
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          }
        });

        let vm1 = this;
        fetch(request)
        .then(response => response.json())
        .then(data => {
          console.log('Success creating variant:', data);
          console.log('variant_id:', data.variant_id);

          if (data.variant_id) {
            vm1.addNewVariantToCart(this.variants, data.variant_id);
            vm1.$emit('clearall');
            setTimeout(function(){ vm1.isLoading = false; }, 2000);
          }
          else if (data.Error) {
            alert(data.Error);
            vm1.isLoading = false;
          }
        })
        .catch((error) => {
          console.error('Error:', error);
          vm1.isLoading = false;
        });
      },
      scroll_left() {
        let content = document.querySelector(".byob-wrapper");
      	content.scrollLeft -= 100;
      },
      scroll_right() {
        let content = document.querySelector(".byob-wrapper");
      	content.scrollLeft += 100;
      },
      hideFooter() {
        this.hide = true;
      },
      showFooter() {
        this.hide = false;
      },
      print() {
        console.log(this.isLoading, 'isLoading');
      }
    },
	template: `
		<teleport to="body">
		  <transition
            name="custom-classes-transition"
            enter-active-class="animate__animated animate__fadeIn animate__faster"
            leave-active-class="animate__animated animate__fadeOut animate__faster"
          >
          <div class="byob-footer" v-if="totalVariants > 0 && !hide">
            <div @click="scroll_left" class="left-arrow" title="scroll left to view more items"><svg width="24" color=#000000" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="angle-left" class="svg-inline--fa fa-angle-left fa-w-8" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><path fill="currentColor" d="M31.7 239l136-136c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9L127.9 256l96.4 96.4c9.4 9.4 9.4 24.6 0 33.9L201.7 409c-9.4 9.4-24.6 9.4-33.9 0l-136-136c-9.5-9.4-9.5-24.6-.1-34z"></path></svg></div>
              <div class="byob-wrapper">
                <div class="card" v-for="(variant, index) in variants">
                <!--<span class="close" @click="$emit('deleted', index)" title="Remove variant from bundle">&times;</span>-->

                <div class="close" @click="$emit('deleted', index)" title="Remove variant from bundle">
                	<svg width="20" aria-hidden="true" focusable="false" data-prefix="far" data-icon="times-circle" class="svg-inline--fa fa-times-circle fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm101.8-262.2L295.6 256l62.2 62.2c4.7 4.7 4.7 12.3 0 17l-22.6 22.6c-4.7 4.7-12.3 4.7-17 0L256 295.6l-62.2 62.2c-4.7 4.7-12.3 4.7-17 0l-22.6-22.6c-4.7-4.7-4.7-12.3 0-17l62.2-62.2-62.2-62.2c-4.7-4.7-4.7-12.3 0-17l22.6-22.6c4.7-4.7 12.3-4.7 17 0l62.2 62.2 62.2-62.2c4.7-4.7 12.3-4.7 17 0l22.6 22.6c4.7 4.7 4.7 12.3 0 17z"></path></svg>
                </div>

                <img :src="variant.featureImage" :title="[[ variant.name ]]" class="footer-image" /> <!--height="150" />-->

                <p class="card-title" v-if="showVariantName">[[ variant.name ]]</p>
              </div>
            </div>

			<div @click="scroll_right" class="right-arrow" title="scroll right to view more items"><svg width="24" color=#000000" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="angle-right" class="svg-inline--fa fa-angle-right fa-w-8" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 512"><path fill="currentColor" d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"></path></svg></div>

            <div class="flex-item-right">
				<p id="label-total-price" v-if="totalVariants > 1">[[ $t('message.totalPrice') ]]: <span style="color:red; text-decoration: line-through">[[ priceWithCurrency(totalPrice) ]]</span></p>
				<!--  inherit the button style in Dawn theme -->
				<button type="button" class="btn btn-add-to-cart button"  @click="addBundleToCart" :disabled="itemsLeft > 0 || isLoading">
					[[ buttonText ]]
					<i v-if="isLoading" class="fa fa-circle-o-notch fa-spin"></i>
  				</button>
 				<!-- <button @click="print">debug isLoading</button>  -->

				<div id="hide-footer-button" @click="hideFooter">
                  <svg xmlns="http://www.w3.org/2000/svg" class="" viewBox="0 0 20 20" fill="currentColor">
					<title>Hide footer</title>
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                  </svg>
				</div>
            </div>
          </div>
		  </transition>
		  <!-- round icon to toggle footer -->
		  <div id="byob-beacon" @click="showFooter" v-if="hide==true" title="Show footer">
			<svg v-if="buildrulesCompleted" xmlns="http://www.w3.org/2000/svg" class="" viewBox="0 0 20 20" :style="{width:'28px', height:'30px', fill:contrastYIQ, stroke: contrastYIQ}">
              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
            </svg>

            <svg v-else-if="icon_type == 'bag'" xmlns="http://www.w3.org/2000/svg" class="" :style="{width:'28px', height:'30px', fill:'none', stroke: contrastYIQ}">
              <g>
                <path stroke="null" stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="m20.21472,13.42915l0,-6.21472a6.21472,6.21472 0 0 0 -12.42943,0l0,6.21472m-4.66104,-3.10736l21.7515,0l1.55368,18.64415l-24.85886,0l1.55368,-18.64415z" id="svg_1"/>
              </g>
            </svg>

			<svg v-else-if="icon_type == 'cart'" xmlns="http://www.w3.org/2000/svg" class="" :style="{width:'28px', height:'30px', fill:'none', stroke: contrastYIQ}">
             <g>
              <g stroke-width="3" stroke="null">
               <path stroke="null" d="m0.74459,1.74459l2.94565,0l0.58913,2.94565m2.35652,11.78259l14.72823,0l5.89129,-11.78259l-22.97604,0m2.35652,11.78259l-2.35652,-11.78259m2.35652,11.78259l-3.37718,3.37718c-0.92788,0.92788 -0.271,2.51411 1.04129,2.51411l17.06413,0m0,0a2.94565,2.94565 0 1 0 0,5.89129a2.94565,2.94565 0 0 0 0,-5.89129zm-11.78259,2.94565a2.94565,2.94565 0 1 1 -5.89129,0a2.94565,2.94565 0 0 1 5.89129,0z" stroke-width="2" stroke-linejoin="round" stroke-linecap="round"/>
              </g>
             </g>
            </svg>

			<svg v-else-if="icon_type == 'gift'" xmlns="http://www.w3.org/2000/svg" class="" :style="{width:'28px', height:'30px', fill:'none', stroke: contrastYIQ}">
             <g>
              <g stroke-width="3" stroke="null">
               <path stroke="null" d="m14,9.05635l0,19.31685m0,-19.31685l0,-2.97182a2.95056,2.97182 0 1 1 2.95056,2.97182l-2.95056,0zm0,0l0,-3.71478a3.6882,3.71478 0 1 0 -3.6882,3.71478l3.6882,0zm-10.32696,5.94365l20.65392,0m-20.65392,0a2.95056,2.97182 0 1 1 0,-5.94365l20.65392,0a2.95056,2.97182 0 1 1 0,5.94365m-20.65392,0l0,10.40138a2.95056,2.97182 0 0 0 2.95056,2.97182l14.7528,0a2.95056,2.97182 0 0 0 2.95056,-2.97182l0,-10.40138" stroke-width="2" stroke-linejoin="round" stroke-linecap="round"/>
              </g>
             </g>
            </svg>
		  </div>
		</teleport>
      `
  };
  const ftb = vueApp.component('footer-bar', footerBar);
  // multi-langual support
  const i18n = VueI18n.createI18n({
    locale: locale, // set locale
    fallbackLocale: 'en', // set fallback locale
    messages, // set locale messages
    compilerOptions: {
      delimiters: ['[[', ']]'],
    }
  });
  vueApp.use(i18n);
  let vm = vueApp.mount('#byobApp');
  // block conflict apps js
  window.YETT_BLACKLIST = [
    /cdn\.pushowl\.com/, /apps\.allfetch\.com/, /track\.klickly\.com/
  ]
</script>
<script src="https://unpkg.com/yett"></script>
{% schema %}
  {
    "name": "BYOB Products Selection",
    "settings": [
	  {
          "type": "range",
          "id": "items_per_row",
          "label": "Items per row",
          "min": 2,
          "max": 4,
          "step": 1,
          "default": 3
      },
	  {
        "type": "checkbox",
        "id": "byob_section_wrapper",
        "label": "Add a wrapper",
        "info": "If the product grid is full screen, your theme may need a wrapper",
        "default": false
      },
	  {
        "type": "header",
        "content": "Product Grid"
      },
	  {
        "type": "paragraph",
        "content": "Hit save to refresh color changes"
      },
	  {
        "type": "color",
        "id": "card_background",
        "label": "Card background",
        "default": "#fff"
      },
	  {
        "type": "color",
        "id": "tab_color",
        "label": "Tab color",
        "default": "#eee"
      },
	  {
        "type": "color",
        "id": "tick_icon_color",
        "label": "Tick icon color",
        "default": "#008000"
      },
	  {
        "type": "color",
        "id": "button_color",
        "label": "Button color",
        "default": "#1878b9"
      },
	  {
        "type": "color",
        "id": "button_text_color",
        "label": "Button text color",
        "default": "#fff"
      },
      {
        "type": "header",
        "content": "Footer Bar"
	  },
      {
        "type": "color",
        "id": "background_color",
        "label": "Background color",
        "default": "#e8e8e8"
      },
      {
        "type": "color",
        "id": "footer_product_name_color",
        "label": "Product name color",
        "default": "#fff"
      },
      {
        "type": "checkbox",
        "id": "footer_show_product_title",
        "label": "Show product title",
        "default": true
      },
	  {
        "type": "checkbox",
        "id": "footer_show_total_price",
        "label": "Show total price",
        "default": true
      },
	  {
        "type": "range",
        "id": "footer_bottom_position",
        "label": "Bottom Position",
        "info": "0: sticking to the bottom",
        "min": 0,
        "max": 30,
        "step": 1,
        "default": 10
      },
      {
        "type": "range",
        "id": "product_card_padding",
        "label": "Product card inner margin",
        "min": 0,
        "max": 10,
        "step": 1,
        "default": 5
      },
	  {
        "type": "header",
        "content": "Beacon"
	  },
	  {
        "type": "paragraph",
        "content": "The beacon is shown when you close the footer."
      },
	  {
        "type": "select",
        "id": "icon_type",
        "info": "Hit save to refresh the icon",
        "label": "Icon style",
        "options": [
          {
            "value": "bag",
            "label": "👜"
          },
          {
            "value": "cart",
            "label": "🛒"
          },
          {
            "value": "gift",
            "label": "🎁"
          }
        ],
        "default": "bag"
      },
	  {
        "type": "color",
        "id": "beacon_color",
        "info": "Storke color will be calculated after save",
        "label": "Beacon color",
        "default": "#1878b9"
      },
	  {
        "type": "radio",
        "id": "icon_horizontal_position",
        "info": "Display the icon on left or right of the page. ",
        "label": "Horizontal position",
        "options": [
          {
            "value": "left",
            "label": "Left"
          },
          {
            "value": "right",
            "label": "Right"
          }
        ],
        "default": "left"
      }
    ]
  }
{% endschema %}
